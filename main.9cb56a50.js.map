{"version":3,"sources":["api.ts","main.ts"],"names":[],"mappings":";AAqDC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IArDD,IAAM,EAAM,gDAIZ,SAAS,IACD,IAAA,EAAU,EAAc,EAAK,OAC5B,OAAA,MAAM,GAAS,KAAK,SAAA,GAAO,OAAA,EAAe,KAGnD,SAAS,EAAQ,GACT,IAAA,EAAU,EAAc,EAAM,EAAS,OACtC,OAAA,MAAM,GAAS,KAAK,SAAA,GAAO,OAAA,EAAiB,KAGrD,SAAS,EAAS,GACV,IAAA,EAAU,EAAc,EAAK,OAAQ,GACpC,OAAA,MAAM,GAAS,KAAK,SAAA,GAAO,OAAA,EAAI,SAGxC,SAAS,EAAQ,GACT,IAAA,EAAU,EAAc,EAAM,EAAK,IAAK,MAAO,GAC9C,OAAA,MAAM,GAAS,KAAK,SAAA,GAAO,OAAA,EAAI,SAGxC,SAAS,EAAW,GACZ,IAAA,EAAU,EAAc,EAAM,EAAS,UACtC,OAAA,MAAM,GAGf,SAAS,EAAc,EAAK,EAAQ,GAQ3B,OAPS,IAAI,QAAQ,EAAK,CAC/B,OAAQ,EACR,KAAM,EAAU,KAAK,UAAU,GAAW,KAC1C,QAAS,IAAI,QAAQ,CACH,eAAA,uBAMtB,SAAS,EAAe,GAClB,OAAe,MAAf,EAAI,OACC,EAAI,OAEJ,GAGX,SAAS,EAAiB,GACpB,OAAe,MAAf,EAAI,OACC,EAAI,OAEJ,GAjDF,QAAA,YAAA,EAAa,QAAA,QAAA,EAAS,QAAA,SAAA,EAAU,QAAA,QAAA,EAAS,QAAA,WAAA;;ACuKjD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAtKD,IAAA,EAAA,QAAA,SAEM,EAAwB,SAAS,eAAe,oBAChD,EAAuB,SAAS,eAAe,mBAIrD,SAAS,IACP,IACA,IAGF,SAAS,IACW,SAAS,qBAAqB,UAAU,GAChD,iBAAiB,QAAS,GAEtC,SAAS,IACP,EAAA,cAAc,KAAK,SAAA,GACjB,EAAoB,GACpB,IACA,MAGJ,SAAS,EAAoB,GAC3B,EAAM,QAAQ,SAAA,GACZ,EAAkB,KAItB,SAAS,IACF,IAAA,IAAI,EAAI,EAAG,EAAI,EAAsB,SAAS,OAAQ,IACzD,EAAyB,EAAsB,SAAS,GAAI,GAGhE,SAAS,IACF,IAAA,IAAI,EAAI,EAAG,EAAI,EAAqB,SAAS,OAAQ,IACxD,EAAyB,EAAqB,SAAS,GAAI,GAI/D,SAAS,IACP,QAAQ,IAAI,kBACN,IAAA,EAAY,SAAS,eAAe,YAEpC,EAAU,CAAE,YADM,EAAU,MACc,WAAW,GAC3D,EAAU,MAAQ,GAClB,EAAA,SAAS,GAAS,KAAK,SAAA,GAAQ,OAAA,EAAkB,KAEnD,SAAS,EAAkB,GACnB,IAAA,EAAe,EAAqB,GACtC,EAAK,WACP,EAAqB,YAAY,GACjC,EAAyB,EAAc,KAEvC,EAAsB,YAAY,GAClC,EAAyB,EAAc,IAG3C,SAAS,EAAqB,GACtB,IAAA,EAAoB,SAAS,cAAc,SACjD,EAAkB,KAAO,WACzB,EAAkB,QAAU,EAAK,UAE3B,IAAA,EAAmB,SAAS,cAAc,SAChD,EAAiB,UAAY,EAAK,YAE5B,IAAA,EAAmB,SAAS,cAAc,SAChD,EAAiB,KAAO,OAElB,IAAA,EAAa,SAAS,cAAc,UAC1C,EAAW,UAAY,UACvB,EAAW,UAAY,OAEjB,IAAA,EAAe,SAAS,cAAc,UAC5C,EAAa,UAAY,YACzB,EAAa,UAAY,SAEnB,IAAA,EAAe,SAAS,cAAc,MAQrC,OAPP,EAAa,GAAK,EAAK,IACvB,EAAa,QAAQ,MAAQ,EAAK,MAClC,EAAa,YAAY,GACzB,EAAa,YAAY,GACzB,EAAa,YAAY,GACzB,EAAa,YAAY,GACzB,EAAa,YAAY,GAClB,EAGT,SAAS,IACP,QAAQ,IAAI,mBACN,IAAA,EAAe,KAAK,WACpB,EAAmB,EAAa,cAAc,oBAC9C,EAAmB,EAAa,cAAc,SAC/B,EAAa,UAAU,SAAS,YAEnD,EAAe,EAAc,EAAkB,GAE/C,EAAsB,EAAkB,GAE1C,EAAa,UAAU,OAAO,YAEhC,SAAS,EAAsB,EAAkB,GAC/C,EAAiB,MAAQ,EAAiB,UAE5C,SAAS,EAAe,EAAc,EAAkB,GAChD,IAAA,EAAoB,EAAa,cAAc,0BAC/C,EAAa,CACjB,IAAK,EAAa,GAClB,UAAW,EAAkB,QAC7B,YAAa,EAAiB,MAC9B,MAAO,EAAa,QAAQ,OAE9B,EAAA,QAAQ,GAAY,KAAK,WACvB,EAAiB,UAAY,EAAiB,QAIlD,SAAS,IACP,QAAQ,IAAI,oBACN,IAAA,EAAe,KAAK,WACpB,EAAmB,EAAa,cAAc,SAC9C,EAAa,CACjB,IAAK,EAAa,GAClB,WAAW,EACX,YAAa,EAAiB,MAC9B,MAAO,EAAa,QAAQ,OAE9B,EAAA,QAAQ,GAAY,KAAK,WACvB,EAAqB,YAAY,GACjC,EAAyB,EAAc,KAI3C,SAAS,IACP,QAAQ,IAAI,sBACN,IAAA,EAAe,KAAK,WACpB,EAAmB,EAAa,cAAc,SAC9C,EAAa,CACjB,IAAK,EAAa,GAClB,WAAW,EACX,YAAa,EAAiB,MAC9B,MAAO,EAAa,QAAQ,OAE9B,EAAA,QAAQ,GAAY,KAAK,WACvB,EAAsB,YAAY,GAClC,EAAyB,EAAc,KAI3C,SAAS,IACP,QAAQ,IAAI,oBACN,IAAA,EAAe,KAAK,WAC1B,EAAA,WAAW,EAAa,IAAI,KAAK,WACR,EAAa,WACrB,YAAY,KAI/B,SAAS,EAAyB,EAAc,GAC9C,QAAQ,IAAI,4BACc,EAAa,cAAc,0BACnC,SAAW,EACV,EAAa,cAAc,eACnC,QAAU,EACA,EAAa,cAAc,iBACnC,QAAU,EAhKzB","file":"main.9cb56a50.js","sourceRoot":"..\\src","sourcesContent":["const url = 'https://api-base.herokuapp.com/api/pub/tasks/';\r\n\r\nexport { getAllTasks, getTask, postTask, putTask, deleteTask };\r\n\r\nfunction getAllTasks() {\r\n  const request = createRequest(url, 'GET');\r\n  return fetch(request).then(res => getListOrEmpty(res));\r\n}\r\n\r\nfunction getTask(task_id) {\r\n  const request = createRequest(url + task_id, 'GET');\r\n  return fetch(request).then(res => getObjectOrEmpty(res));\r\n}\r\n\r\nfunction postTask(task) {\r\n  const request = createRequest(url, 'POST', task);\r\n  return fetch(request).then(res => res.json());\r\n}\r\n\r\nfunction putTask(task) {\r\n  const request = createRequest(url + task._id, 'PUT', task);\r\n  return fetch(request).then(res => res.json());\r\n}\r\n\r\nfunction deleteTask(task_id) {\r\n  const request = createRequest(url + task_id, 'DELETE');\r\n  return fetch(request);\r\n}\r\n\r\nfunction createRequest(url, method, payload) {\r\n  const request = new Request(url, {\r\n    method: method,\r\n    body: payload ? JSON.stringify(payload) : null,\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  });\r\n  return request;\r\n}\r\n\r\nfunction getListOrEmpty(res) {\r\n  if (res.status === 200) {\r\n    return res.json();\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\nfunction getObjectOrEmpty(res) {\r\n  if (res.status === 200) {\r\n    return res.json();\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n","/* eslint-disable max-params */\r\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable max-lines-per-function */\r\nimport { deleteTask, getAllTasks, postTask, putTask } from './api';\r\n\r\nconst incompleteTasksHolder = document.getElementById('incomplete-tasks');\r\nconst completedTasksHolder = document.getElementById('completed-tasks');\r\n\r\ninit();\r\n\r\nfunction init() {\r\n  setAddTaskEventListener();\r\n  getInitialData();\r\n}\r\n\r\nfunction setAddTaskEventListener() {\r\n  const addButton = document.getElementsByTagName('button')[0];\r\n  addButton.addEventListener('click', addTask);\r\n}\r\nfunction getInitialData() {\r\n  getAllTasks().then(tasks => {\r\n    appendTasksElements(tasks);\r\n    bindEventsOfIncompletedTaskElements();\r\n    bindEventsOfCompletedTaskElements();\r\n  });\r\n}\r\nfunction appendTasksElements(tasks: any) {\r\n  tasks.forEach(task => {\r\n    appendTaskElement(task);\r\n  });\r\n}\r\n\r\nfunction bindEventsOfIncompletedTaskElements() {\r\n  for (let i = 0; i < incompleteTasksHolder.children.length; i++) {\r\n    bindEventsOfTaskElements(incompleteTasksHolder.children[i], markTaskCompleted);\r\n  }\r\n}\r\nfunction bindEventsOfCompletedTaskElements() {\r\n  for (let i = 0; i < completedTasksHolder.children.length; i++) {\r\n    bindEventsOfTaskElements(completedTasksHolder.children[i], markTaskIncomplete);\r\n  }\r\n}\r\n\r\nfunction addTask() {\r\n  console.log('Adding Task...');\r\n  const taskInput = document.getElementById('new-task') as HTMLInputElement;\r\n  const taskDescription = taskInput.value;\r\n  const newTask = { description: taskDescription, completed: false };\r\n  taskInput.value = '';\r\n  postTask(newTask).then(task => appendTaskElement(task));\r\n}\r\nfunction appendTaskElement(task) {\r\n  const taskListItem = createNewTaskElement(task);\r\n  if (task.completed) {\r\n    completedTasksHolder.appendChild(taskListItem);\r\n    bindEventsOfTaskElements(taskListItem, markTaskIncomplete);\r\n  } else {\r\n    incompleteTasksHolder.appendChild(taskListItem);\r\n    bindEventsOfTaskElements(taskListItem, markTaskCompleted);\r\n  }\r\n}\r\nfunction createNewTaskElement(task) {\r\n  const completedCheckBox = document.createElement('input');\r\n  completedCheckBox.type = 'checkBox';\r\n  completedCheckBox.checked = task.completed;\r\n\r\n  const descriptionLabel = document.createElement('label');\r\n  descriptionLabel.innerText = task.description;\r\n\r\n  const descriptionInput = document.createElement('input');\r\n  descriptionInput.type = 'text';\r\n\r\n  const editButton = document.createElement('button');\r\n  editButton.innerText = 'ðŸ–Š Edit';\r\n  editButton.className = 'edit';\r\n\r\n  const deleteButton = document.createElement('button');\r\n  deleteButton.innerText = 'ðŸ—‘ Delete';\r\n  deleteButton.className = 'delete';\r\n\r\n  const taskListItem = document.createElement('li');\r\n  taskListItem.id = task._id;\r\n  taskListItem.dataset.owner = task.owner;\r\n  taskListItem.appendChild(completedCheckBox);\r\n  taskListItem.appendChild(descriptionLabel);\r\n  taskListItem.appendChild(descriptionInput);\r\n  taskListItem.appendChild(editButton);\r\n  taskListItem.appendChild(deleteButton);\r\n  return taskListItem;\r\n}\r\n\r\nfunction editTask() {\r\n  console.log('Editing Task...');\r\n  const taskListItem = this.parentNode;\r\n  const descriptionInput = taskListItem.querySelector('input[type=text]');\r\n  const descriptionLabel = taskListItem.querySelector('label');\r\n  const isInEditMode = taskListItem.classList.contains('editMode');\r\n  if (isInEditMode) {\r\n    saveEditedTask(taskListItem, descriptionInput, descriptionLabel);\r\n  } else {\r\n    prepareTaskForEdition(descriptionInput, descriptionLabel);\r\n  }\r\n  taskListItem.classList.toggle('editMode');\r\n}\r\nfunction prepareTaskForEdition(descriptionInput, descriptionLabel) {\r\n  descriptionInput.value = descriptionLabel.innerText;\r\n}\r\nfunction saveEditedTask(taskListItem, descriptionInput, descriptionLabel) {\r\n  const completedCheckBox = taskListItem.querySelector('input[type=\"checkbox\"]');\r\n  const editedTask = {\r\n    _id: taskListItem.id,\r\n    completed: completedCheckBox.checked,\r\n    description: descriptionInput.value,\r\n    owner: taskListItem.dataset.owner,\r\n  };\r\n  putTask(editedTask).then(() => {\r\n    descriptionLabel.innerText = descriptionInput.value;\r\n  });\r\n}\r\n\r\nfunction markTaskCompleted() {\r\n  console.log('Task Complete...');\r\n  const taskListItem = this.parentNode;\r\n  const descriptionLabel = taskListItem.querySelector('label');\r\n  const editedTask = {\r\n    _id: taskListItem.id,\r\n    completed: true,\r\n    description: descriptionLabel.value,\r\n    owner: taskListItem.dataset.owner,\r\n  };\r\n  putTask(editedTask).then(() => {\r\n    completedTasksHolder.appendChild(taskListItem);\r\n    bindEventsOfTaskElements(taskListItem, markTaskIncomplete);\r\n  });\r\n}\r\n\r\nfunction markTaskIncomplete() {\r\n  console.log('Task Incomplete...');\r\n  const taskListItem = this.parentNode;\r\n  const descriptionLabel = taskListItem.querySelector('label');\r\n  const editedTask = {\r\n    _id: taskListItem.id,\r\n    completed: false,\r\n    description: descriptionLabel.value,\r\n    owner: taskListItem.dataset.owner,\r\n  };\r\n  putTask(editedTask).then(() => {\r\n    incompleteTasksHolder.appendChild(taskListItem);\r\n    bindEventsOfTaskElements(taskListItem, markTaskCompleted);\r\n  });\r\n}\r\n\r\nfunction removeTask() {\r\n  console.log('Removing Task...');\r\n  const taskListItem = this.parentNode;\r\n  deleteTask(taskListItem.id).then(() => {\r\n    const tasksListItems = taskListItem.parentNode;\r\n    tasksListItems.removeChild(taskListItem);\r\n  });\r\n}\r\n\r\nfunction bindEventsOfTaskElements(taskListItem, checkBoxEventHandler) {\r\n  console.log('Binding List item events');\r\n  const completedCheckBox = taskListItem.querySelector('input[type=\"checkbox\"]');\r\n  completedCheckBox.onchange = checkBoxEventHandler;\r\n  const editButton = taskListItem.querySelector('button.edit');\r\n  editButton.onclick = editTask;\r\n  const deleteButton = taskListItem.querySelector('button.delete');\r\n  deleteButton.onclick = removeTask;\r\n}\r\n"]}