{"version":3,"sources":["api.ts","main.ts"],"names":[],"mappings":"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","file":"main.8f3c29c1.js","sourceRoot":"..\\src","sourcesContent":["const url = 'https://api-base-21.herokuapp.com/api/pub/tasks/';\n\nexport { getAllTasks, getTask, postTask, putTask, deleteTask };\n\nfunction getAllTasks() {\n  const request = createRequest(url, 'GET');\n  return fetch(request).then(res => getListOrEmpty(res));\n}\n\nfunction getTask(task_id) {\n  const request = createRequest(url + task_id, 'GET');\n  return fetch(request).then(res => getObjectOrEmpty(res));\n}\n\nfunction postTask(task) {\n  const request = createRequest(url, 'POST', task);\n  return fetch(request).then(res => res.json());\n}\n\nfunction putTask(task) {\n  const request = createRequest(url + task.id, 'PUT', task);\n  return fetch(request).then(res => res.json());\n}\n\nfunction deleteTask(task_id) {\n  const request = createRequest(url + task_id, 'DELETE');\n  return fetch(request);\n}\n\nfunction createRequest(url, method, payload?) {\n  const request = new Request(url, {\n    method: method,\n    body: payload ? JSON.stringify(payload) : null,\n    headers: new Headers({\n      'Content-Type': 'application/json',\n    }),\n  });\n  return request;\n}\n\nfunction getListOrEmpty(res) {\n  if (res.status === 200) {\n    return res.json();\n  } else {\n    return [];\n  }\n}\nfunction getObjectOrEmpty(res) {\n  if (res.status === 200) {\n    return res.json();\n  } else {\n    return {};\n  }\n}\n","/* eslint-disable max-params */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable max-lines-per-function */\nimport { deleteTask, getAllTasks, postTask, putTask } from './api';\n\nconst incompleteTasksHolder = document.getElementById('incomplete-tasks');\nconst completedTasksHolder = document.getElementById('completed-tasks');\n\ninit();\n\nfunction init() {\n  setAddTaskEventListener();\n  getInitialData();\n}\n\nfunction setAddTaskEventListener() {\n  const addButton = document.getElementsByTagName('button')[0];\n  addButton.addEventListener('click', addTask);\n}\nfunction getInitialData() {\n  getAllTasks().then(tasks => {\n    appendTasksElements(tasks);\n    bindEventsOfIncompletedTaskElements();\n    bindEventsOfCompletedTaskElements();\n  });\n}\nfunction appendTasksElements(tasks: any) {\n  tasks.forEach(task => {\n    appendTaskElement(task);\n  });\n}\n\nfunction bindEventsOfIncompletedTaskElements() {\n  for (let i = 0; i < incompleteTasksHolder.children.length; i++) {\n    bindEventsOfTaskElements(incompleteTasksHolder.children[i], markTaskCompleted);\n  }\n}\nfunction bindEventsOfCompletedTaskElements() {\n  for (let i = 0; i < completedTasksHolder.children.length; i++) {\n    bindEventsOfTaskElements(completedTasksHolder.children[i], markTaskIncomplete);\n  }\n}\n\nfunction addTask() {\n  console.log('Adding Task...');\n  const taskInput = document.getElementById('new-task') as HTMLInputElement;\n  const taskDescription = taskInput.value;\n  const newTask = { description: taskDescription, completed: false };\n  taskInput.value = '';\n  postTask(newTask).then(task => appendTaskElement(task));\n}\nfunction appendTaskElement(task) {\n  const taskListItem = createNewTaskElement(task);\n  if (task.completed) {\n    completedTasksHolder.appendChild(taskListItem);\n    bindEventsOfTaskElements(taskListItem, markTaskIncomplete);\n  } else {\n    incompleteTasksHolder.appendChild(taskListItem);\n    bindEventsOfTaskElements(taskListItem, markTaskCompleted);\n  }\n}\nfunction createNewTaskElement(task) {\n  const completedCheckBox = document.createElement('input');\n  completedCheckBox.type = 'checkBox';\n  completedCheckBox.checked = task.completed;\n\n  const descriptionLabel = document.createElement('label');\n  descriptionLabel.innerText = task.description;\n\n  const descriptionInput = document.createElement('input');\n  descriptionInput.type = 'text';\n\n  const editButton = document.createElement('button');\n  editButton.innerText = 'ðŸ–Š Edit';\n  editButton.className = 'edit';\n\n  const deleteButton = document.createElement('button');\n  deleteButton.innerText = 'ðŸ—‘ Delete';\n  deleteButton.className = 'delete';\n\n  const taskListItem = document.createElement('li');\n  taskListItem.id = task.id;\n  taskListItem.dataset.owner = task.owner;\n  taskListItem.appendChild(completedCheckBox);\n  taskListItem.appendChild(descriptionLabel);\n  taskListItem.appendChild(descriptionInput);\n  taskListItem.appendChild(editButton);\n  taskListItem.appendChild(deleteButton);\n  return taskListItem;\n}\n\nfunction editTask() {\n  console.log('Editing Task...');\n  const taskListItem = this.parentNode;\n  const descriptionInput = taskListItem.querySelector('input[type=text]');\n  const descriptionLabel = taskListItem.querySelector('label');\n  const isInEditMode = taskListItem.classList.contains('editMode');\n  if (isInEditMode) {\n    saveEditedTask(taskListItem, descriptionInput, descriptionLabel);\n  } else {\n    prepareTaskForEdition(descriptionInput, descriptionLabel);\n  }\n  taskListItem.classList.toggle('editMode');\n}\nfunction prepareTaskForEdition(descriptionInput, descriptionLabel) {\n  descriptionInput.value = descriptionLabel.innerText;\n}\nfunction saveEditedTask(taskListItem, descriptionInput, descriptionLabel) {\n  const completedCheckBox = taskListItem.querySelector('input[type=\"checkbox\"]');\n  const editedTask = {\n    id: taskListItem.id,\n    completed: completedCheckBox.checked,\n    description: descriptionInput.value,\n    owner: taskListItem.dataset.owner,\n  };\n  putTask(editedTask).then(() => {\n    descriptionLabel.innerText = descriptionInput.value;\n  });\n}\n\nfunction markTaskCompleted() {\n  const taskListItem = this.parentNode;\n  const descriptionLabel = taskListItem.querySelector('label');\n  const editedTask = {\n    id: taskListItem.id,\n    completed: true,\n    description: descriptionLabel.value,\n    owner: taskListItem.dataset.owner,\n  };\n  console.log('Task Complete...', editedTask);\n  putTask(editedTask).then(() => {\n    completedTasksHolder.appendChild(taskListItem);\n    bindEventsOfTaskElements(taskListItem, markTaskIncomplete);\n  });\n}\n\nfunction markTaskIncomplete() {\n  const taskListItem = this.parentNode;\n  const descriptionLabel = taskListItem.querySelector('label');\n  const editedTask = {\n    id: taskListItem.id,\n    completed: false,\n    description: descriptionLabel.value,\n    owner: taskListItem.dataset.owner,\n  };\n  console.log('Task Incomplete...', editedTask);\n  putTask(editedTask).then(() => {\n    incompleteTasksHolder.appendChild(taskListItem);\n    bindEventsOfTaskElements(taskListItem, markTaskCompleted);\n  });\n}\n\nfunction removeTask() {\n  console.log('Removing Task...');\n  const taskListItem = this.parentNode;\n  deleteTask(taskListItem.id).then(() => {\n    const tasksListItems = taskListItem.parentNode;\n    tasksListItems.removeChild(taskListItem);\n  });\n}\n\nfunction bindEventsOfTaskElements(taskListItem, checkBoxEventHandler) {\n  console.log('Binding List item events');\n  const completedCheckBox = taskListItem.querySelector('input[type=\"checkbox\"]');\n  completedCheckBox.onchange = checkBoxEventHandler;\n  const editButton = taskListItem.querySelector('button.edit');\n  editButton.onclick = editTask;\n  const deleteButton = taskListItem.querySelector('button.delete');\n  deleteButton.onclick = removeTask;\n}\n"]}